import { OpenAIApi } from 'openai';

declare abstract class Chain<T> {
    abstract call(...args: any[]): any;
}

declare const _default: {
    OpenAI: typeof OpenAI;
    PromptChain: typeof PromptChain;
    Prompt: typeof Prompt;
    countTokens: (text: string) => number;
    textSplitter: (text: string, maxLength: number) => string[];
};
export default _default;

declare abstract class ModelProvider {
    type: ModelProviderType;
    constructor(type: ModelProviderType);
    abstract generate(prompt: Prompt): Promise<string>;
}

declare enum ModelProviderType {
    OpenAI = 0
}

declare class OpenAI extends ModelProvider {
    api: OpenAIApi;
    config: OpenAIConfig;
    apiKey: string;
    constructor(apiKey: string, config?: Partial<OpenAIConfig>);
    private runCompletion;
    generate: (prompt: Prompt) => Promise<string>;
}

declare interface OpenAIConfig {
    model: string;
    temperature: number;
    max_tokens: number;
    stop: string[] | string | null;
}

declare class Prompt {
    text: string;
    variables: {
        [name: string]: string;
    };
    outputName: string;
    constructor(text: string, variables: {
        [name: string]: string;
    }, outputName: string);
    format(): string;
    private injectVariables;
}

declare class PromptChain extends Chain<PromptChainData> {
    provider: ModelProvider;
    prompt: Prompt;
    data: PromptChainData;
    getData(): PromptChainData;
    constructor(provider: ModelProvider, prompt: Prompt);
    call(): Promise<string>;
}

declare interface PromptChainData {
    providerType: ModelProviderType;
    prompt: Prompt;
    output: {
        [name: string]: any;
    };
}

export { }
