'use strict';

var openai = require('openai');
var GPT3Tokenizer = require('gpt3-tokenizer');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var GPT3Tokenizer__default = /*#__PURE__*/_interopDefaultLegacy(GPT3Tokenizer);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var Chain = /** @class */ (function () {
    function Chain() {
    }
    return Chain;
}());
var PromptChain = /** @class */ (function (_super) {
    __extends(PromptChain, _super);
    function PromptChain(provider, prompt) {
        var _this = _super.call(this) || this;
        _this.provider = provider;
        _this.prompt = prompt;
        _this.data = {
            providerType: provider.type,
            prompt: prompt,
            output: {}
        };
        return _this;
    }
    PromptChain.prototype.getData = function () {
        return this.data;
    };
    PromptChain.prototype.call = function () {
        return __awaiter(this, void 0, void 0, function () {
            var completion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.provider.generate(this.prompt)];
                    case 1:
                        completion = _a.sent();
                        this.data.output[this.prompt.outputName] = completion;
                        return [2 /*return*/, completion];
                }
            });
        });
    };
    return PromptChain;
}(Chain));

var Prompt = /** @class */ (function () {
    function Prompt(text, variables, outputName) {
        this.text = text;
        this.variables = variables;
        this.outputName = outputName;
    }
    Prompt.prototype.format = function () {
        return this.injectVariables();
    };
    Prompt.prototype.injectVariables = function () {
        var _a;
        return (_a = Object.entries(this.variables)) === null || _a === void 0 ? void 0 : _a.reduce(function (acc, _a) {
            var name = _a[0], value = _a[1];
            return acc.replaceAll("{{".concat(name, "}}"), value);
        }, this.text);
    };
    return Prompt;
}());

// replace any escaped stop tokens like "\\n" their unescaped versions
var unescapeStopTokens = function (stop_tokens) {
    if (Array.isArray(stop_tokens)) {
        console.debug("found array of tokens");
        return stop_tokens.map(function (token) {
            return JSON.parse("\"".concat(token, "\""));
        });
    }
    else {
        console.debug("found single token", stop_tokens);
        return JSON.parse("\"".concat(stop_tokens, "\""));
    }
};

var ModelProviderType;
(function (ModelProviderType) {
    ModelProviderType[ModelProviderType["OpenAI"] = 0] = "OpenAI";
})(ModelProviderType || (ModelProviderType = {}));
var ModelProvider = /** @class */ (function () {
    function ModelProvider(type) {
        this.type = type;
    }
    return ModelProvider;
}());

var DEFAULT_CONFIG = {
    model: "text-davinci-003",
    max_tokens: 128,
    temperature: 0.7,
    stop: null
};
var OpenAI = /** @class */ (function (_super) {
    __extends(OpenAI, _super);
    function OpenAI(apiKey, config) {
        var _this = _super.call(this, ModelProviderType.OpenAI) || this;
        _this.config = DEFAULT_CONFIG;
        _this.runCompletion = function (req) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (req.stop != null) {
                            req.stop = unescapeStopTokens(req.stop);
                        }
                        return [4 /*yield*/, this.api.createCompletion(__assign({}, req))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        }); };
        _this.generate = function (prompt) { return __awaiter(_this, void 0, void 0, function () {
            var data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.runCompletion(__assign({ prompt: prompt.format() }, this.config))];
                    case 1:
                        data = _b.sent();
                        return [2 /*return*/, (_a = data === null || data === void 0 ? void 0 : data.choices) === null || _a === void 0 ? void 0 : _a[0].text];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, "failed"];
                }
            });
        }); };
        var configuration = new openai.Configuration({
            apiKey: process.env.OPENAI_API_KEY
        });
        _this.api = new openai.OpenAIApi(configuration);
        _this.apiKey = apiKey;
        _this.config = __assign(__assign({}, _this.config), config);
        return _this;
    }
    return OpenAI;
}(ModelProvider));

var tokenizer = new GPT3Tokenizer__default["default"]({ type: "gpt3" });
var countTokens = function (text) {
    // do something here
    var encoded = tokenizer.encode(text);
    return encoded.bpe.length;
};
var textSplitter = function (text, maxLength) {
    var encoded = tokenizer.encode(text);
    var res = [];
    for (var i = 0; i < encoded.text.length; i += maxLength) {
        res.push(encoded.text.slice(i, i + maxLength).join(""));
    }
    return res;
};

var index = {
    OpenAI: OpenAI,
    PromptChain: PromptChain,
    Prompt: Prompt,
    countTokens: countTokens,
    textSplitter: textSplitter
};

module.exports = index;
